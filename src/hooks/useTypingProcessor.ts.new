import { useRef, useCallback } from 'react';
import { useTypingStore } from '@/store/typingStore';
import { useTypingGameStore } from '@/store/typingGameStore';
import { useAudioStore } from '@/store/audioStore';

/**
 * キー入力処理に特化したシンプルなカスタムフック
 * ZustandとReactのベストプラクティスに従い、レンダリング最適化を実現
 */
export const useTypingProcessor = () => {
  // キー入力キューのref
  const keyInputQueueRef = useRef<string[]>([]);
  // アニメーションフレーム用のref
  const requestRef = useRef<number | undefined>(undefined);
  
  // キーボードイベントハンドラをセットアップする関数
  const setupKeydownHandler = useCallback((
    status: 'ready' | 'playing' | 'finished',
    onGameStart: () => void,
    onGameReset: () => void,
    onWordComplete: () => void
  ) => {
    // ローカル変数としてゲーム状態を保持
    let gameStatus = status;
    
    // キーボードイベントハンドラ
    const keyDownHandler = (e: KeyboardEvent) => {
      // ゲームがプレイ中でない場合はスペースキーでスタート
      if (gameStatus !== 'playing') {
        if (e.key === ' ' || e.code === 'Space') {
          e.preventDefault();
          gameStatus = 'playing';
          onGameStart();
        }
        return;
      }

      // ESCキーでゲームリセット
      if (e.key === 'Escape') {
        onGameReset();
        return;
      }

      // 入力可能キーの場合は処理
      if (e.key.length === 1) {
        // 直接処理し、アニメーションフレームを待たない
        handleKeyInput(e.key);
      }
    };
    
    // キー入力処理関数
    const handleKeyInput = (key: string) => {
      if (gameStatus !== 'playing') return;
      
      // Zustandのストア状態を取得
      const typingStore = useTypingStore.getState();
      const gameStore = useTypingGameStore.getState();
      const audioStore = useAudioStore.getState();
      
      const { currentWord } = gameStore;
      const { currentKanaIndex, setCurrentKanaIndex, setUserInput, setCurrentKanaDisplay } = typingStore;
      
      // 現在入力中のかな文字オブジェクト
      const currentTypingChar = currentWord.typingChars[currentKanaIndex];
      if (!currentTypingChar) return;
      
      // 入力処理
      if (currentTypingChar.canAccept(key)) {
        currentTypingChar.accept(key);
        
        // 表示情報の更新
        const currentInfo = currentTypingChar.getDisplayInfo();
        setCurrentKanaDisplay({
          acceptedText: currentInfo.acceptedText,
          remainingText: currentInfo.remainingText,
          displayText: currentInfo.displayText
        });
        
        setUserInput(prev => prev + key);
        
        // かなが完了したかチェック
        if (currentInfo.isCompleted) {
          const nextIndex = currentKanaIndex + 1;
          setCurrentKanaIndex(nextIndex);
          
          // 次のかなの表示情報を更新
          if (nextIndex < currentWord.typingChars.length) {
            const nextInfo = currentWord.typingChars[nextIndex].getDisplayInfo();
            setCurrentKanaDisplay({
              acceptedText: nextInfo.acceptedText,
              remainingText: nextInfo.remainingText,
              displayText: nextInfo.displayText
            });
          } else {
            // お題がすべて完了した場合、次の単語へ進む
            setTimeout(onWordComplete, 500);
          }
        }
        
        // 正解音を再生
        audioStore.playSound('correct', 0.5);
      } else {
        // 不正解音を再生
        audioStore.playSound('wrong', 0.5);
      }
    };
    
    // イベントリスナー登録
    window.addEventListener('keydown', keyDownHandler);
    
    // クリーンアップ関数
    return () => {
      window.removeEventListener('keydown', keyDownHandler);
    };
  }, []);
  
  return { setupKeydownHandler };
};
